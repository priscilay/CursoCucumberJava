<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Eclipse Ditto: Announcing Eclipse Ditto Release 0.9.0</title>
	<guid isPermaLink="true">https://www.eclipse.org/ditto/2019-07-10-release-announcement-090.html</guid>
	<link>https://www.eclipse.org/ditto/2019-07-10-release-announcement-090.html</link>
	<description>&lt;p&gt;Today the Eclipse Ditto team proudly presents its second release 
&lt;a href=&quot;https://projects.eclipse.org/projects/iot.ditto/releases/0.9.0&quot;&gt;0.9.0&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The topics of this release in a nutshell were:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Memory improvements for huge amounts (multi million) of digital twins which are held in memory&lt;/li&gt;
  &lt;li&gt;Adding metrics and logging around the connectivity feature in order to enable being able to operate connections to foreign systems/brokers via APIs&lt;/li&gt;
  &lt;li&gt;Enhancing Ditto’s connectivity feature by additionally being able to connect to Apache Kafka&lt;/li&gt;
  &lt;li&gt;Performance improvements of Ditto’s search functionality&lt;/li&gt;
  &lt;li&gt;Stabilization of cluster bootstrapping&lt;/li&gt;
  &lt;li&gt;Refactoring of how the services configurations are determined&lt;/li&gt;
  &lt;li&gt;Addition of a Helm template in order to simplify Kubernetes based deployments&lt;/li&gt;
  &lt;li&gt;Contributions from Microsoft in order to ease operating Eclipse Ditto on Microsoft Azure&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Please have a look at the &lt;a href=&quot;https://www.eclipse.org/ditto/release_notes_090.html&quot;&gt;0.9.0 release notes&lt;/a&gt; for a more detailed information on the release.&lt;/p&gt;

&lt;h2 id=&quot;artifacts&quot;&gt;Artifacts&lt;/h2&gt;

&lt;p&gt;The new Java artifacts have been published at the &lt;a href=&quot;https://repo.eclipse.org/content/repositories/ditto/&quot;&gt;Eclipse Maven repository&lt;/a&gt;
as well as &lt;a href=&quot;https://repo1.maven.org/maven2/org/eclipse/ditto/&quot;&gt;Maven central&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker images have been pushed to Docker Hub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-policies/&quot;&gt;eclipse/ditto-policies&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things/&quot;&gt;eclipse/ditto-things&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-things-search/&quot;&gt;eclipse/ditto-things-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-gateway/&quot;&gt;eclipse/ditto-gateway&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-connectivity/&quot;&gt;eclipse/ditto-connectivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hub.docker.com/r/eclipse/ditto-concierge/&quot;&gt;eclipse/ditto-concierge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img alt=&quot;Ditto&quot; class=&quot;docimage&quot; src=&quot;https://www.eclipse.org/ditto/images/ditto.svg&quot; /&gt;&lt;/figure&gt;

&lt;p&gt;–&lt;br /&gt;
The Eclipse Ditto team&lt;/p&gt;</description>
	<pubDate>Wed, 10 Jul 2019 04:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat CodeReady Studio for Eclipse 2019-06</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/12.12.0.ga.html</guid>
	<link>https://tools.jboss.org/blog/12.12.0.ga.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/2019-06/4.12.0.Final.html&quot;&gt;JBoss Tools 4.12.0&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/2019-06/12.12.0.GA.html&quot;&gt;Red Hat CodeReady Studio 12.12&lt;/a&gt; for Eclipse 2019-06 are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;crstudio12&quot; src=&quot;https://tools.jboss.org/blog/images/crstudio12.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat CodeReady Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://developers.redhat.com/products/codeready-studio/overview/&quot;&gt;Red Hat CodeReady product page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar codereadystudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) CodeReady Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.12 (2019-06) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/release/2019-06/r/eclipse-ide-java-ee-developers&quot;&gt;Eclipse 4.12 2019-06 JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat CodeReady Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was improvements for container based development and bug fixing.
      Eclipse 2019-06 itself has a lot of new cool stuff but let me highlight just a few updates in both Eclipse 2019-06 and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift&quot;&gt;&lt;/a&gt;OpenShift&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;openshift-container-platform-4-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#openshift-container-platform-4-support&quot;&gt;&lt;/a&gt;OpenShift Container Platform 4 support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;With the new OpenShift Container Platform (OCP) 4 now available (see this
      &lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-redefines-enterprise-kubernetes-through-full-stack-automation-red-hat-openshift-4?source=pressreleaselisting&quot; target=&quot;_blank&quot;&gt;article&lt;/a&gt;),
      even if this is a major shift compared to OCP 3, JBoss Tools is compatible with
      this major release in a transparent way. Just define your connection to your
      OCP 4 based cluster as you did before for an OCP 3 cluster, and use the tooling !&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;wildfly-17-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#wildfly-17-server-adapter&quot;&gt;&lt;/a&gt;Wildfly 17 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with Wildfly 17. It adds support for Java EE 8.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;hibernate-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#hibernate-tools&quot;&gt;&lt;/a&gt;Hibernate Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;new-runtime-provider&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#new-runtime-provider&quot;&gt;&lt;/a&gt;New Runtime Provider&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The new Hibernate 5.4 runtime provider has been added. It incorporates Hibernate Core version 5.4.3.Final and Hibernate Tools version 5.4.3.Final&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;runtime-provider-updates&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#runtime-provider-updates&quot;&gt;&lt;/a&gt;Runtime Provider Updates&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Hibernate 5.3 runtime provider now incorporates Hibernate Core version 5.3.10.Final and Hibernate Tools version 5.3.10.Final.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;maven&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#maven&quot;&gt;&lt;/a&gt;Maven&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;maven-support-updated-to-m2e-1-12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#maven-support-updated-to-m2e-1-12&quot;&gt;&lt;/a&gt;Maven support updated to M2E 1.12&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Maven support is based on Eclipse M2E 1.12&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;platform&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#platform&quot;&gt;&lt;/a&gt;Platform&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;views-dialogs-and-toolbar&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#views-dialogs-and-toolbar&quot;&gt;&lt;/a&gt;Views, Dialogs and Toolbar&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;import-project-by-passing-it-as-command-line-argument&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#import-project-by-passing-it-as-command-line-argument&quot;&gt;&lt;/a&gt;Import project by passing it as command-line argument&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can import a project into Eclipse by passing its path as a parameter to the
      launcher. The command would look like &lt;code&gt;&lt;code&gt;eclipse /path/to/project&lt;/code&gt;&lt;/code&gt; on Linux and Windows,
      or &lt;code&gt;&lt;code&gt;open Eclipse.app -a /path/to/project&lt;/code&gt;&lt;/code&gt; on macOS.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;pass directory to launcher&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/pass-directory-to-launcher.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;launch-run-and-debug-configurations-from-quick-access&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#launch-run-and-debug-configurations-from-quick-access&quot;&gt;&lt;/a&gt;Launch Run and Debug configurations from Quick Access&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;From the &lt;strong&gt;Quick Access&lt;/strong&gt; proposals (accessible with &lt;code&gt;&lt;code&gt;Ctrl+3&lt;/code&gt;&lt;/code&gt; shortcut) you can now directly launch
      any of the Run or Debug configurations available in your workspace.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;run debug quickaccess&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/run-debug-quickaccess.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      For performance reasons, the extra &lt;strong&gt;Quick Access&lt;/strong&gt; entries are only visible if the &lt;code&gt;&lt;code&gt;org.eclipse.debug.ui&lt;/code&gt;&lt;/code&gt;
      bundle was already activated by some previous action in the workbench such as editing a launch configuration,
      or expanding the &lt;em&gt;Run As…​&lt;/em&gt; menus.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;themes-and-styling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#themes-and-styling&quot;&gt;&lt;/a&gt;Themes and Styling&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-view-menu-icon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#improved-view-menu-icon&quot;&gt;&lt;/a&gt;Improved View Menu Icon&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The icon used for the view menu has been improved. It is now crisp on high resolution
      displays and also looks much better in the dark theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Compare the old version at the top and the new version at the bottom:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;view menu&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/view_menu.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;high-resolution-images-drawn-on-mac&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#high-resolution-images-drawn-on-mac&quot;&gt;&lt;/a&gt;High resolution images drawn on Mac&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On Mac, images and text are now drawn in high resolution during GC operations.
      You can see crisp images on high resolution displays in the editor rulers, forms, etc in Eclipse.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Compare the old version at the top and the new version at the bottom:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;hidpi mac old behavior&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/hidpi-mac-old-behavior.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;hidpi mac new behavior&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/hidpi-mac-new-behavior.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;table-tree-background-lines-shown-in-dark-theme-on-mac&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#table-tree-background-lines-shown-in-dark-theme-on-mac&quot;&gt;&lt;/a&gt;Table/Tree background lines shown in dark theme on Mac&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In dark theme on Mac, the &lt;strong&gt;Table&lt;/strong&gt; and &lt;strong&gt;Trees&lt;/strong&gt; in Eclipse now show the alternating dark lines
      in the background when &lt;code&gt;&lt;code&gt;setLinesVisible(true)&lt;/code&gt;&lt;/code&gt; is set. Earlier they had a gray background
      even if line visibility was true.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Example of a Tree and Table in Eclipse with alternating dark lines in the background:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;dark theme alternating lines&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/dark-theme-alternating-lines.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;equinox&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#equinox&quot;&gt;&lt;/a&gt;Equinox&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When the &lt;strong&gt;Equinox OSGi Framework&lt;/strong&gt; is launched the installed bundles are activated according
      to their configured start-level. The bundles with lower start-levels are activated first.
      Bundles within the same start-level are activated sequentially from a single thread.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new configuration option &lt;code&gt;&lt;code&gt;equinox.start.level.thread.count&lt;/code&gt;&lt;/code&gt; has been added that enables
      the framework to start bundles within the same start-level in parallel. The default value is &lt;code&gt;&lt;code&gt;1&lt;/code&gt;&lt;/code&gt;
      which keeps the previous behavior of activating bundles from a single thread.
      Setting the value to &lt;code&gt;&lt;code&gt;0&lt;/code&gt;&lt;/code&gt; enables parallel activation using a thread count equal
      to &lt;code&gt;&lt;code&gt;Runtime.getRuntime().availableProcessors()&lt;/code&gt;&lt;/code&gt;. Setting the value to a number greater than &lt;code&gt;&lt;code&gt;1&lt;/code&gt;&lt;/code&gt;
      will use the specified number as the thread count for parallel bundle activation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The default is &lt;code&gt;&lt;code&gt;1&lt;/code&gt;&lt;/code&gt; because of the risk of possible deadlock when activating bundles in parallel.
      Extensive testing must be done on the set of bundle installed in the framework before considering
      enabling this option in a product.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;java-developement-tools-jdt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-developement-tools-jdt&quot;&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-12-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-12-support&quot;&gt;&lt;/a&gt;Java 12 Support&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;change-project-compliance-and-jre-to-12&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#change-project-compliance-and-jre-to-12&quot;&gt;&lt;/a&gt;Change project compliance and JRE to 12&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Change project compliance and JRE to 12&lt;/strong&gt; is provided to change the current project
      to be compatible with Java 12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix change compliance 12&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-change-compliance-12.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;enable-preview-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#enable-preview-features&quot;&gt;&lt;/a&gt;Enable preview features&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Preview features in Java 12 can be enabled using &lt;strong&gt;Preferences &amp;gt; Java &amp;gt; Compiler &amp;gt; Enable preview features&lt;/strong&gt;
      option. The problem severity of these preview features can be configured using the
      &lt;strong&gt;Preview features with severity level&lt;/strong&gt; option.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;enable preview&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/enable-preview.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;set-enable-preview-features&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#set-enable-preview-features&quot;&gt;&lt;/a&gt;Set Enable preview features&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Configure problem severity&lt;/strong&gt; is provided to update the problem severity of
      preview features in Java 12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix configure severity 12&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-configure-severity-12.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;add-default-case-to-switch-statement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#add-default-case-to-switch-statement&quot;&gt;&lt;/a&gt;Add default case to switch statement&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Add &amp;amp;aposdefault&amp;amp;apos case&lt;/strong&gt; is provided to add default case to a enhanced switch statement in Java 12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix default switch statement&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-default-switch-statement.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;add-missing-case-statements-to-switch-statement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#add-missing-case-statements-to-switch-statement&quot;&gt;&lt;/a&gt;Add missing case statements to switch statement&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Add missing case statements&lt;/strong&gt; is provided for a enhanced switch statement in Java 12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix missing case switch statement&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-missing-case-switch-statement.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;add-default-case-to-switch-expression&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#add-default-case-to-switch-expression&quot;&gt;&lt;/a&gt;Add default case to switch expression&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Add &amp;amp;aposdefault&amp;amp;apos case&lt;/strong&gt; is provided to add default case to a switch expression.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix default switch expression&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-default-switch-expression.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;add-missing-case-statements-to-switch-expression&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#add-missing-case-statements-to-switch-expression&quot;&gt;&lt;/a&gt;Add missing case statements to switch expression&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Add missing case statements&lt;/strong&gt; is provided for switch expressions.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix missing case switch expression&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-missing-case-switch-expression.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;format-whitespaces-in-switch&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#format-whitespaces-in-switch&quot;&gt;&lt;/a&gt;Format whitespaces in &amp;amp;aposswitch&amp;amp;apos&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As Java 12 introduced some new features into the &lt;code&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/code&gt; construct, the formatter profile
      has some new settings for it. The settings allow you to control spaces around the arrow operator
      (separately for &lt;code&gt;&lt;code&gt;case&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;&lt;code&gt;default&lt;/code&gt;&lt;/code&gt;) and around commas in a multi-value case.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The settings can be found in the &lt;strong&gt;Profile Editor (Preferences &amp;gt; Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​)&lt;/strong&gt;
      under the &lt;strong&gt;White space &amp;gt; Control statements &amp;gt; &amp;amp;aposswitch&amp;amp;apos&lt;/strong&gt; subsection.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter switch&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/formatter-switch.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;split-switch-case-labels&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#split-switch-case-labels&quot;&gt;&lt;/a&gt;Split Switch Case Labels&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As Java 12 introduced the ability to group multiple &lt;code&gt;&lt;code&gt;switch&lt;/code&gt;&lt;/code&gt; case labels into a single case expression,
      a quick assist is provided that allows these grouped labels to be split into separate case statements.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;split switch case labels&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/split-switch-case-labels.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-editor&quot;&gt;&lt;/a&gt;Java Editor&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;show-method-parameter-names-on-code-as-code-minings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#show-method-parameter-names-on-code-as-code-minings&quot;&gt;&lt;/a&gt;Show method parameter names on code as code minings&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Code Mining&lt;/strong&gt; preferences, you can now enable the &lt;strong&gt;Show parameter names&lt;/strong&gt; option.
      This will show the parameter names as code minings in method or constructor calls, for cases where
      the resolution may not be obvious for a human reader.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For example, the code mining will be shown if the argument name in the method call is not an exact match
      of the parameter name or if the argument name doesn’t contain the parameter name as a substring.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;parameter name codeminings&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/parameter-name-codeminings.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;show-number-of-implementations-of-methods-as-code-minings&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#show-number-of-implementations-of-methods-as-code-minings&quot;&gt;&lt;/a&gt;Show number of implementations of methods as code minings&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Code Mining&lt;/strong&gt; preferences, selecting
      &lt;strong&gt;Show implementations with the Show References (including implementations) for → Methods&lt;/strong&gt; option now
      shows implementations of methods.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;method implementation codeminings&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/method-implementation-codeminings.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Clicking on method implementations brings up the &lt;strong&gt;Search&lt;/strong&gt; view that shows all implementations of the method in sub-types.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;method implementation codeminings click&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/method-implementation-codeminings-click.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;open-single-implementation-reference-in-editor-from-code-mining&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#open-single-implementation-reference-in-editor-from-code-mining&quot;&gt;&lt;/a&gt;Open single implementation/reference in editor from code mining&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When the &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Code Mining&lt;/strong&gt; preferences are enabled and a single implementation or reference is shown,
      moving the cursor over the annotation and using &lt;strong&gt;Ctrl+Click&lt;/strong&gt; will open the editor and display the single
      implementation or reference.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;ctrlclickimpl&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/ctrlclickimpl.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;additional-quick-fixes-for-service-provider-constructors&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#additional-quick-fixes-for-service-provider-constructors&quot;&gt;&lt;/a&gt;Additional quick fixes for service provider constructors&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Appropriate quick fixes are offered when a service defined in a &lt;code&gt;&lt;code&gt;module-info.java&lt;/code&gt;&lt;/code&gt; file has a service provider
      implementation whose no-arg constructor is not visible, or is non-existent.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;service provider create constructor&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/service-provider-create-constructor.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;service provider change constructor visibility&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/service-provider-change-constructor-visibility.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;template-to-create-switch-labeled-statement-and-switch-expressions&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#template-to-create-switch-labeled-statement-and-switch-expressions&quot;&gt;&lt;/a&gt;Template to create Switch Labeled Statement and Switch Expressions&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Java Editor&lt;/strong&gt; now offers new templates for the creation of switch labeled statements and switch expressions.
      On a switch statement, three new templates: &lt;strong&gt;switch labeled statement&lt;/strong&gt;, &lt;strong&gt;switch case expression&lt;/strong&gt; and
      &lt;strong&gt;switch labeled expression&lt;/strong&gt; are available as shown below. These new templates are available on Java projects
      having compliance level of Java 12 or above.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;switch labeled statement&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/switch_labeled_statement.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;switch case expression&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/switch_case_expression.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;switch labeled expression&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/switch_labeled_expression.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If &lt;strong&gt;switch&lt;/strong&gt; is being used as an expression, then only &lt;strong&gt;switch case expression&lt;/strong&gt;
      and &lt;strong&gt;switch labeled expression&lt;/strong&gt; templates are available as shown below:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;switch expression templates&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/switch_expression_templates.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-views-and-dialogs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-views-and-dialogs&quot;&gt;&lt;/a&gt;Java Views and Dialogs&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;enable-comment-generation-in-modules-and-packages&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#enable-comment-generation-in-modules-and-packages&quot;&gt;&lt;/a&gt;Enable comment generation in modules and packages&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;An option is now available to enable/disable the comment generation while
      creating &lt;code&gt;&lt;code&gt;module-info.java&lt;/code&gt;&lt;/code&gt; or &lt;code&gt;&lt;code&gt;package-info.java&lt;/code&gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;module info comment generation check box&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/module-info-comment-generation-check-box.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;package info comment generation checkbox&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/package-info-comment-generation-checkbox.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-create-getter-and-setter-quick-assist&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#improved-create-getter-and-setter-quick-assist&quot;&gt;&lt;/a&gt;Improved &amp;amp;aposcreate getter and setter&amp;amp;apos quick assist&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The quick assist for creating getter and setter methods from fields no longer forces you to create both.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;getter setter dialog new&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/getter-setter-dialog-new.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;quick-fix-to-open-all-required-closed-projects&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#quick-fix-to-open-all-required-closed-projects&quot;&gt;&lt;/a&gt;Quick fix to open all required closed projects&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix to open all required closed projects is now available in the &lt;strong&gt;Problems&lt;/strong&gt; view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix open missing projects problem view&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-open-missing-projects-problem-view.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix open missing projects&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/quickfix-open-missing-projects.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;new-ui-for-configuring-module-dependencies&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#new-ui-for-configuring-module-dependencies&quot;&gt;&lt;/a&gt;New UI for configuring Module Dependencies&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Java Build Path&lt;/strong&gt; configuration now has a new tab &lt;strong&gt;Module Dependencies&lt;/strong&gt;, which will gradually replace
      the options previously hidden behind the &lt;strong&gt;Is Modular&lt;/strong&gt; node on other tabs of this dialog. The new tab provides
      an intuitive way for configuring all those module-related options for which Java 9 had introduced new command
      line options like &lt;code&gt;&lt;code&gt;--limit-modules&lt;/code&gt;&lt;/code&gt; etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;module dependencies cropped&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/module-dependencies-cropped.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The dialog focuses on how to build one Java Project, here &quot;org.greetings&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Below this focus module, the left hand pane shows all modules that participate in the build, where decorations
      A and S mark automatic modules and system modules, respectively. The extent of system modules (from JRE)
      can be modified with the &lt;strong&gt;Add System Module…​&lt;/strong&gt; and &lt;strong&gt;Remove&lt;/strong&gt; buttons (corresponds to &lt;code&gt;&lt;code&gt;--add-modules&lt;/code&gt;&lt;/code&gt;
      and &lt;code&gt;&lt;code&gt;--limit-modules&lt;/code&gt;&lt;/code&gt;).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When a module is selected in the left hand pane, the right hand pane allows to configure the following properties
      for this module:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Read Module:&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Select additional modules that should be accessible from the selected module (corresponds to &lt;code&gt;&lt;code&gt;--add-reads&lt;/code&gt;&lt;/code&gt;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Expose Package:&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Select additional packages to be exposed (&quot;exports&quot; or &quot;opens&quot;) from the selected module (corresponds
      to &lt;code&gt;&lt;code&gt;--add-exports&lt;/code&gt;&lt;/code&gt; or &lt;code&gt;&lt;code&gt;--add-opens&lt;/code&gt;&lt;/code&gt;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Patch with:&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Add more packages and classes to the selected module (corresponds to &lt;code&gt;&lt;code&gt;--patch-module&lt;/code&gt;&lt;/code&gt;)&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-compiler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#java-compiler&quot;&gt;&lt;/a&gt;Java Compiler&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;experimental-java-index-retired&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#experimental-java-index-retired&quot;&gt;&lt;/a&gt;Experimental Java index retired&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Eclipse 4.7 introduced a new experimental Java index which was disabled by default.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Due to lack of resources to properly support all Java 9+ language changes, this index
      is not available anymore starting with Eclipse 4.12.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The preference to enable it in &lt;strong&gt;Preferences &amp;gt; Java&lt;/strong&gt; is removed and the old index will be always used.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock note&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      &lt;strong&gt;Preferences &amp;gt; Java &amp;gt; Rebuild Index&lt;/strong&gt; button can be used to delete the existing index files and free disk space.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;debug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#debug&quot;&gt;&lt;/a&gt;Debug&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;run-to-line-on-ctrl-alt-click-in-annotation-ruler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#run-to-line-on-ctrl-alt-click-in-annotation-ruler&quot;&gt;&lt;/a&gt;&amp;amp;aposRun to Line&amp;amp;apos on Ctrl+Alt+Click in annotation ruler&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new shortcut, &lt;strong&gt;Ctrl+Alt+Click&lt;/strong&gt;, has been added to the annotation ruler that will invoke the &lt;strong&gt;&amp;amp;aposRun to Line&amp;amp;apos&lt;/strong&gt;
      command and take the program execution to the line of invocation.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;run to line&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/run-to-line.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;content-assist-in-debug-shell&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#content-assist-in-debug-shell&quot;&gt;&lt;/a&gt;Content assist in Debug Shell&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Content assist (&lt;strong&gt;Ctrl+Space&lt;/strong&gt;) support is now available in the &lt;strong&gt;Debug Shell&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;content assist debug shell&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/content-assist-debug-shell.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;clear-java-stack-trace-console-usage-hint-on-first-edit&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#clear-java-stack-trace-console-usage-hint-on-first-edit&quot;&gt;&lt;/a&gt;Clear Java Stack Trace Console usage hint on first edit&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Java Stack Trace Console&lt;/strong&gt; shows a usage hint when opened the first time. This message
      is now automatically removed when the user starts typing or pasting a stack trace.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jstc initial clear&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/jstc-initial-clear.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;lambda-variable-names-shown-in-variables-view&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#lambda-variable-names-shown-in-variables-view&quot;&gt;&lt;/a&gt;Lambda variable names shown in Variables view&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Lambda variable names are now shown in the &lt;strong&gt;Variables&lt;/strong&gt; view while debugging projects in the workspace.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;lambda variables view&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.12/images/lambda-variables-view.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;jdt-developers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#jdt-developers&quot;&gt;&lt;/a&gt;JDT Developers&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;support-for-new-javadoc-tags&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#support-for-new-javadoc-tags&quot;&gt;&lt;/a&gt;Support for new Javadoc tags&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The following Javadoc tags are now supported by the compiler and auto-complete.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Tags introduced in JDK 8:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@apiNote&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@implSpec&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@implNote&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Tags introduced in JDK 9:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@index&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@hidden&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@provides&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@uses&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Tags introduced in JDK 10:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;code&gt;@summary&lt;/code&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.12.0.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;https://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.12.0 and Red Hat CodeReady Studio 12.12 out we are already working on the next release for Eclipse 2019-09.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 09 Jul 2019 14:20:23 +0000</pubDate>
</item>
<item>
	<title>Christian Pontesegger: Building UIs with EASE</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-3460102793186140898.post-390668608738243831</guid>
	<link>http://codeandme.blogspot.com/2019/07/building-uis-with-ease.html</link>
	<description>You probably used &lt;a href=&quot;https://www.eclipse.org/ease/&quot; target=&quot;_blank&quot;&gt;EASE&lt;/a&gt; before to automate daily tasks in your IDE or to &lt;a href=&quot;http://codeandme.blogspot.com/2014/12/ease-scripts-conquer-ui.html&quot; target=&quot;_blank&quot;&gt;augment toolbars and menus&lt;/a&gt; with custom functionality. But so far scripts could not be used to build UIs. This changed with the recent contribution of the &lt;i&gt;UI Builder&lt;/i&gt; module.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;What it is all about&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;The &lt;i&gt;UI Builder&lt;/i&gt; module allows to create views and dialogs by pure script code in your IDE. It is great for custom views that developers do not want to put into their products, for rapid prototyping and even for mocking.&lt;br /&gt;&lt;br /&gt;The aim of EASE is to hide layout complexity as much as possible and provide a simple, yet flexible way to implement typical UI tasks.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Example 1: Input Form&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;We will start by creating a simple input form for address data.&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;loadModule(&quot;/System/UI Builder&quot;);&lt;br /&gt;createView(&quot;Create Contact&quot;);&lt;br /&gt;&lt;br /&gt;setColumnCount(2);&lt;br /&gt;createLabel(&quot;First Name:&quot;);&lt;br /&gt;var txtFirstName = createText();&lt;br /&gt;createLabel(&quot;Last Name:&quot;);&lt;br /&gt;var txtLastName = createText();&lt;br /&gt;&lt;/pre&gt;This snippet will create a dynamic view as shown below:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-brN2-68HYis/XSNop8MmpuI/AAAAAAAABHQ/iEPADCmZMakR19LW21MSDgjGPj7gmKjtwCLcBGAs/s1600/script_form.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;155&quot; src=&quot;https://1.bp.blogspot.com/-brN2-68HYis/XSNop8MmpuI/AAAAAAAABHQ/iEPADCmZMakR19LW21MSDgjGPj7gmKjtwCLcBGAs/s400/script_form.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The renderer used will apply a &lt;a href=&quot;https://www.eclipse.org/articles/Article-Understanding-Layouts/Understanding-Layouts.htm&quot; target=&quot;_blank&quot;&gt;GridLayout&lt;/a&gt;. By setting the &lt;i&gt;columnCount&lt;/i&gt; to 2 we may simply add our elements without providing any additional layout information - a simple way to create basic layouts.&lt;br /&gt;&lt;br /&gt;If needed EASE provides more control by providing layout information when creating components:&lt;br /&gt;&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;createView(&quot;Create Contact&quot;);&lt;br /&gt;createLabel(&quot;First Name:&quot;, &quot;1/1 &amp;gt;x&quot;);&lt;br /&gt;var txtFirstName = createText(&quot;2-4/1 o!&quot;);&lt;br /&gt;createLabel(&quot;Last Name:&quot;, &quot;1/2 &amp;gt;x&quot;);&lt;br /&gt;var txtLastName = createText(&quot;2-4/2 o!&quot;);&lt;br /&gt;&lt;/pre&gt;Creates the same view as above, but now with detailed layout information.&lt;br /&gt;As an example &lt;i&gt;&quot;1/2 &amp;gt;x&quot;&lt;/i&gt; means: first column, second row, horizontal align right, vertical align middle. A full documentation on the syntax is provided in the module documentation (Hover over the &lt;i&gt;UI Builder&lt;/i&gt; module in the &lt;i&gt;Modules Explorer&lt;/i&gt; view).&lt;br /&gt;&lt;br /&gt;Now lets create a combo viewer to select a country for the address:&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;cmbCountry = createComboViewer([&quot;Austria&quot;, &quot;Germany&quot;, &quot;India&quot;, &quot;USA&quot;])&lt;br /&gt;&lt;/pre&gt;Simple, isn't it?&lt;br /&gt;&lt;br /&gt;So far we did not need to react on any of our UI elements. Next step is to create a button which needs some kind of callback action:&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;createButton(&quot;Save 1&quot;, 'print(&quot;you hit the save button&quot;)')&lt;br /&gt;createButton(&quot;Save 2&quot;, saveAddress)&lt;br /&gt;&lt;br /&gt;function saveAddress() {&lt;br /&gt; print(&quot;This is the save method&quot;);&lt;br /&gt;}&lt;br /&gt;&lt;/pre&gt;The first version of a button adds the callback code as string argument. When the button gets pressed, the callback code will be executed. You may call any script code that the engine is capable of interpreting.&lt;br /&gt;&lt;br /&gt;The second version looks a bit cleaner, as it defines a function &lt;i&gt;saveAddress() &lt;/i&gt;which is called on a button click. Note that we provide a function reference to &lt;i&gt;createButton()&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://git.eclipse.org/c/ease/org.eclipse.ease.scripts.git/tree/Demos/UI%20Builder%20Examples/AddressBook/Address%20Input.js&quot; target=&quot;_blank&quot;&gt;View the full example&lt;/a&gt; of this script on our &lt;a href=&quot;https://git.eclipse.org/c/ease/org.eclipse.ease.scripts.git/tree&quot; target=&quot;_blank&quot;&gt;script repository&lt;/a&gt;. In addition to some more layouting it also contains a working implementation of the save action to store addresses as JSON data files.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/--lzn_mY5Qgk/XSOChZd5CcI/AAAAAAAABHg/m7V3kv57g4Y-a3oHdQEhIBd44Pq6KaESQCLcBGAs/s1600/script_form2.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;211&quot; src=&quot;https://1.bp.blogspot.com/--lzn_mY5Qgk/XSOChZd5CcI/AAAAAAAABHg/m7V3kv57g4Y-a3oHdQEhIBd44Pq6KaESQCLcBGAs/s400/script_form2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;&lt;u&gt;Interacting with SWT controls&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;The saveAddress() method needs to read data from the input fields of our form. This could be done using&lt;/div&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;var firstName = txtFirstName.getText();&lt;/pre&gt;Unfortunately SWT Controls can only be queried in the UI thread, while the script engine is executed in its own thread. To move code execution to the UI thread, the UI module provides a function executeUI(). By default this functionality is disabled as a bad script executed in the UI thread might stall your Eclipse IDE. To enable it you need to set a checkbox in &lt;i&gt;Preferences/Scripting&lt;/i&gt;. The full call then looks like this:&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;loadModule(&quot;/System/UI&quot;)&lt;br /&gt;var firstName = executeUI('txtFirstName.getText();');&lt;/pre&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Example 2: A viewer for our phone numbers&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;Now that we are able to create some sample data, we also need a viewer for our phone numbers. Say we are able to load all our addresses into an array, the only thing we need is a table viewer to visualize our entries. Following 2 lines will do the job:&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;var addresses = readAddresses();&lt;br /&gt;var tableViewer = createTableViewer(addresses)&lt;br /&gt;&lt;/pre&gt;Where &lt;i&gt;readAddresses()&lt;/i&gt; collects our &lt;i&gt;*.address&lt;/i&gt; files and stores them into an array.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-68LKx5DHLtI/XSOGL7c-VsI/AAAAAAAABHs/sTsk1alaXqMcfAsazcqoIM7gam9lEw1tACLcBGAs/s1600/phonebook_1.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;135&quot; src=&quot;https://1.bp.blogspot.com/-68LKx5DHLtI/XSOGL7c-VsI/AAAAAAAABHs/sTsk1alaXqMcfAsazcqoIM7gam9lEw1tACLcBGAs/s400/phonebook_1.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;So the viewer works, however we need to define how our columns shall be rendered.&lt;br /&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;createViewerColumn(tableViewer, &quot;Name&quot;, createLabelProvider(&quot;getProviderElement().firstName + ' ' + getProviderElement().lastName&quot;))&lt;br /&gt;createViewerColumn(tableViewer, &quot;Phone&quot;, createLabelProvider(&quot;getProviderElement().phone&quot;))&lt;br /&gt;&lt;/pre&gt;Whenever a callback needs a viewer element, getProviderElement() holds the actual element.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Y62uH5tW7DY/XSOH3xupNrI/AAAAAAAABH4/nc-_VNd0Zq0zqyNDTvoj3qKzbOtZOc3pwCLcBGAs/s1600/phonebook_2.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;135&quot; src=&quot;https://1.bp.blogspot.com/-Y62uH5tW7DY/XSOH3xupNrI/AAAAAAAABH4/nc-_VNd0Zq0zqyNDTvoj3qKzbOtZOc3pwCLcBGAs/s400/phonebook_2.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;We are done! 3 lines of code for a TableViewer does not sound too bad, right? Again a &lt;a href=&quot;https://git.eclipse.org/c/ease/org.eclipse.ease.scripts.git/tree/Demos/UI%20Builder%20Examples/AddressBook/List.js&quot; target=&quot;_blank&quot;&gt;full example&lt;/a&gt; is available on our script repository. It automatically loads &lt;i&gt;*.address&lt;/i&gt; files from your workspace and displays them in the view.&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;&lt;u&gt;Example 3: A workspace viewer&lt;/u&gt;&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;We had a &lt;i&gt;TableViewer&lt;/i&gt; before, now lets try a &lt;i&gt;TreeViewer&lt;/i&gt;. As a tree needs structure, we need to provide a callback to calculate child elements from a given parent:&lt;/div&gt;&lt;pre class=&quot;brush: javascript&quot;&gt;var viewer = createTreeViewer(getWorkspace().getProjects(), getChildren);&lt;br /&gt;&lt;br /&gt;function getChildren() {&lt;br /&gt; if (getProviderElement() instanceof org.eclipse.core.resources.IContainer)&lt;br /&gt;  return getProviderElement().members();&lt;br /&gt; &lt;br /&gt; return null;&lt;br /&gt;}&lt;/pre&gt;So simple! The &lt;a href=&quot;https://git.eclipse.org/c/ease/org.eclipse.ease.scripts.git/tree/Demos/UI%20Builder%20Examples/Project%20Info%20Viewer.js&quot; target=&quot;_blank&quot;&gt;full example&lt;/a&gt; looks like this:&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-2MQ7dKZ66Ss/XSOJgJTpDsI/AAAAAAAABIE/29WKkpR8C7MMNsg_P2MVCcj2qZD46KNKQCLcBGAs/s1600/project_viewer.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-2MQ7dKZ66Ss/XSOJgJTpDsI/AAAAAAAABIE/29WKkpR8C7MMNsg_P2MVCcj2qZD46KNKQCLcBGAs/s1600/project_viewer.png&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;b&gt;&lt;u&gt;Example 4: Math function viewer&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;The last example demonstrates how to add a custom &lt;i&gt;Control&lt;/i&gt; to a view.&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-_rcEjTB8-xI/XSOKb3F8QCI/AAAAAAAABIM/f8-GYaCBZmMrMkw4VBFso6qqvkPX3vOFwCLcBGAs/s1600/functions.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;304&quot; src=&quot;https://1.bp.blogspot.com/-_rcEjTB8-xI/XSOKb3F8QCI/AAAAAAAABIM/f8-GYaCBZmMrMkw4VBFso6qqvkPX3vOFwCLcBGAs/s640/functions.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;For plotting we use the Charting module that is shipped with EASE. The &lt;a href=&quot;https://git.eclipse.org/c/ease/org.eclipse.ease.scripts.git/tree/Demos/UI%20Builder%20Examples/Plot%20function.js&quot; target=&quot;_blank&quot;&gt;source code&lt;/a&gt; should be pretty much self explanatory.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;u&gt;Some Tips &amp;amp; Tricks&lt;/u&gt;&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Layouting is dynamic.&lt;br /&gt;Unlike the Java &lt;i&gt;GridLayout&lt;/i&gt; you do not need to fill all cells of your layout. The EASE renderer takes care to automatically fill empty cells with placeholders&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Elements can be replaced.&lt;br /&gt;If you use coordinates when creating controls, you may easily replace a given control by another one. This simplifies the process of layouting (eg if you experience with alignments) and even allows a view to dynamically change its components depending on some external data/events&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Full control.&lt;br /&gt;While some methods from SWT do not have a corresponding script function, still all SWT calls may be used as the &lt;i&gt;create*&lt;/i&gt; methods expose the underlying SWT instances.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;Layout help.&lt;br /&gt;To simplify layouting use the &lt;i&gt;showGrid()&lt;/i&gt; function. It displays cell borders that help you to see row/column borders.&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;br /&gt;</description>
	<pubDate>Mon, 08 Jul 2019 18:54:52 +0000</pubDate>
	<author>noreply@blogger.com (Christian Pontesegger)</author>
</item>
<item>
	<title>Jens Reimann: Eclipse Milo 0.3, updated examples</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=4271</guid>
	<link>https://dentrassi.de/2019/07/06/eclipse-milo-0-3-updated-examples/</link>
	<description>&lt;p&gt;We while back I wrote&lt;a href=&quot;https://dentrassi.de/2017/09/14/creating-opc-ua-solutions-eclipse-milo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt; a blog post about OPC UA, using Milo&lt;/a&gt; and added a bunch of examples, in order to get you started. Time passed by and now Milo 0.3.x is released, with a changed API and so those examples no longer work. Not too much has changed, but the experience of running into compile errors isn’t a good one. Finally I found some time to update the examples.&lt;/p&gt;



&lt;span id=&quot;more-4271&quot;&gt;&lt;/span&gt;



&lt;p&gt;This blog post will focus on the changes, compared to the old blog post. As the old blog post is still valid, I though it might make sense to keep it, and introduce the changes of Milo here. The examples repository however is updated to show the new APIs on the &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt;



&lt;h2&gt;Making contact&lt;/h2&gt;



&lt;p&gt;This is the first situation where you run into the changed API, getting the endpoints. Although the new code is not much different, the old will no longer work:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;List&amp;lt;EndpointDescription&amp;gt; endpoints =
  DiscoveryClient.getEndpoints(&quot;opc.tcp://localhost:4840&quot;)
    .get();&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;When you compare that to the old code, then you will notice that instead of an array, now a list is being used and the class name changed. Not too bad.&lt;/p&gt;



&lt;p&gt;Also, the way you create a new client instance with Milo 0.3.x is a bit different now:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;OpcUaClientConfigBuilder cfg = new OpcUaClientConfigBuilder();
cfg.setEndpoint(endpoints[0]); // please do better, and not only pick the first entry

OpcUaClient client = OpcUaClient.create(cfg.build());
client.connect().get();&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Using the static &lt;code&gt;create&lt;/code&gt; method instead of the constructor allows for a bit more processing, before the class instance is actually created. Also may this new method throw an exception now. Handling this in an async way isn’t too hard when you are using Java 9+:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;public static CompletableFuture&amp;lt;OpcUaClient&amp;gt; createClient(String uri) {
  return DiscoveryClient
    .getEndpoints(uri) // look up endpoints from remote
    .thenCompose(endpoints -&amp;gt; {
      try {
        return CompletableFuture.completedFuture(
            OpcUaClient.create(buildConfiguration(endpoints)) // &quot;buildConfiguration&quot; should pick an endpoint
        );
      } catch (final UaException e) {
        return CompletableFuture.failedFuture(e);
      }
    });
}&lt;/code&gt;&lt;/pre&gt;



&lt;h2&gt;That’s it? That’s it!&lt;/h2&gt;



&lt;p&gt;Well, pretty much. However, we have only been looking at the client side of Milo. Implementing your own server requires to use the server side API, and that change much more. But to be fair, the changes improve the situation a lot, and make things much easier to use.&lt;/p&gt;



&lt;h2&gt;Milo examples repository&lt;/h2&gt;



&lt;p&gt;As mentioned, the examples in the repository &lt;a href=&quot;https://github.com/ctron/milo-ece2017&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;ctron/milo-ece2017&lt;/a&gt; have been updated as well. They also contain the changed server side, which changed a lot more than the client side.&lt;/p&gt;



&lt;p&gt;When you &lt;a href=&quot;https://github.com/ctron/milo-ece2017/compare/milo-0.2x...master&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;compare the two branches&lt;/a&gt; &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;milo-0.2.x&lt;/code&gt;, you can see the changed I made for updating to the new version.&lt;/p&gt;



&lt;p&gt;I hope this helps a bit in getting started with Milo 0.3.x. And please be sure to read the &lt;a href=&quot;https://dentrassi.de/2017/09/14/creating-opc-ua-solutions-eclipse-milo/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;original post&lt;/a&gt;, giving a more detailed introduction, as well.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2019/07/06/eclipse-milo-0-3-updated-examples/&quot; rel=&quot;nofollow&quot;&gt;Eclipse Milo 0.3, updated examples&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Sat, 06 Jul 2019 20:22:28 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Early-Bird Talks: A Preview of What's to Come</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/BSu5JZyuips/early-bird-talks-preview-whats-come</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/BSu5JZyuips/early-bird-talks-preview-whats-come</link>
	<description>The community really came though for the early-bird deadline this year. The program committee reviewed a record number of talks (144) to come up with a top-six list!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/BSu5JZyuips&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 05 Jul 2019 13:25:00 +0000</pubDate>
</item>
<item>
	<title>N4JS: Short-Circuit Evaluation in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-761854849853353188</guid>
	<link>https://n4js.blogspot.com/2018/10/short-circuit-evaluation-in-n4js_17.html</link>
	<description>&lt;h4&gt;Short-circuit evaluation is a popular feature of many programming languages and also part of N4JS. In this post, we show how the control-flow analysis of the N4JS-IDE deals with short-circuit evaluation, since it can have a substantial effect on the data flow and execution of a program.&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-g6wjXUt3sao/W8buQnfTrcI/AAAAAAAAADk/kAsgHzdkJ1UFfWKwj-MvMgyk5_d09iwtACLcBGAs/s1600/introduction.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-g6wjXUt3sao/W8buQnfTrcI/AAAAAAAAADk/kAsgHzdkJ1UFfWKwj-MvMgyk5_d09iwtACLcBGAs/s1600/introduction.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Short circuit evaluation is a means to improve runtime performance when evaluating boolean expressions. This improvement is a result of skipping code execution. The example above shows an &lt;span&gt;if&lt;/span&gt;-statement whose condition consists of two boolean expressions that combine the values of &lt;span&gt;1&lt;/span&gt;, &lt;span&gt;2&lt;/span&gt; and &lt;span&gt;3,&lt;/span&gt; and its control flow graph. Note that the number literals are placeholders for more meaningful subexpressions.&lt;br /&gt;&lt;br /&gt;First the &lt;i&gt;logical and&lt;/i&gt;, then the &lt;i&gt;logical or&lt;/i&gt; gets evaluated: &lt;span&gt;(1 &amp;amp;&amp;amp; 2) || 3&lt;/span&gt;. In case the expression &lt;span&gt;1 &amp;amp;&amp;amp; 2&lt;/span&gt; evaluates to true, the evaluation of the subclause &lt;span&gt;3&lt;/span&gt; will be skipped and the evaluation of the entire condition results to true. This skipping of nested boolean expressions is called &lt;i&gt;short circuit evaluation&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;However, instead of skipping expression &lt;span&gt;3&lt;/span&gt;, expression &lt;span&gt;2&lt;/span&gt; might be skipped. In case condition &lt;span&gt;1&lt;/span&gt; does not hold, the control flow will continue with condition &lt;span&gt;3&lt;/span&gt; right away. This control flow completely takes places within the if-condition, whereas the former short circuit targets the then block.&lt;br /&gt;&lt;br /&gt;The reasoning behind short circuit evaluation is  that the skipped code does not affect the result of the whole boolean  expression. If the left hand side of the logical or expression evaluates  to true, the whole or expression also does. Only if the left hand side  is false, the right hand side will be evaluated. Complementary, the  right hand side of a logical and expression is skipped in case the left  hand side evaluates to false.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Side Effects&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Risks of short circuit evaluation might arise in case a subexpression has side effects: These side effects will not occur if the subexpression is skipped. However, a program that relies on side effects of expressions inside an &lt;span&gt;if&lt;/span&gt;-condition can be called fragile (or adventurous). In any case it is recommended to write side-effect free conditions.&lt;/div&gt;&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-0JcnBeJ-1Rk/W8buRqUWCvI/AAAAAAAAADw/zYwwORwyclEdUHm5HQex4aKR5UPHlATIACLcBGAs/s1600/side_effects.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-0JcnBeJ-1Rk/W8buRqUWCvI/AAAAAAAAADw/zYwwORwyclEdUHm5HQex4aKR5UPHlATIACLcBGAs/s1600/side_effects.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Have a look at the example above. In case variable &lt;span&gt;i&lt;/span&gt; has a value of zero, the right hand side expression &lt;span&gt;i++&lt;/span&gt; is executed, otherwise, it is skipped. The side effect here is the post-increment the value of &lt;span&gt;i&lt;/span&gt;. If the value of &lt;span&gt;i&lt;/span&gt; is other than zero, this value will be printed out. Otherwise, the value will be incremented but not printed. The control flow shows this behavior with the edge starting at &lt;span&gt;i&lt;/span&gt; and targeting the symbol &lt;span&gt;console&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Loops&lt;/h4&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-1L_PrkVxmYg/W8buQulSsEI/AAAAAAAAADc/Dh9U1bA9ZboCQP52QjjPIync_DTyJL2AQCLcBGAs/s1600/loops.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-1L_PrkVxmYg/W8buQulSsEI/AAAAAAAAADc/Dh9U1bA9ZboCQP52QjjPIync_DTyJL2AQCLcBGAs/s1600/loops.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;Loop conditions also benefit from short circuit evaluation. This is important to know when reasoning about the all possible control flow paths through the loop: Each short circuit will introduce another path. Combining all of them makes data flow in loops difficult to understand in case of side effects in the subconditions.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h4&gt;Creative use of short circuit evaluation&lt;/h4&gt;&lt;div&gt;&lt;br /&gt;Misusing short circuit evaluation can mimic if-statements by using  expressions but without using  the language feature of conditional expressions (i.e. &lt;span&gt;condition() ? then() : else()&lt;/span&gt;). This could be used when if-statements should be executed e.g. when passing  arguments to method calls, or when computing the update part of  for-loops.&lt;/div&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-bQAq2BWre9s/W8buRTY5OJI/AAAAAAAAADo/uzZ-OqHynNcfrh1k6jYMVbN2MkhiI9xtQCLcBGAs/s1600/modelling.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot; width=&quot;575&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-bQAq2BWre9s/W8buRTY5OJI/AAAAAAAAADo/uzZ-OqHynNcfrh1k6jYMVbN2MkhiI9xtQCLcBGAs/s1600/modelling.png&quot; width=&quot;575&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;The picture above shows the two versions: the first uses an if-statement and the second uses an  expression statement. These two statements call the functions &lt;span&gt;condition&lt;/span&gt;, &lt;span&gt;then&lt;/span&gt; and &lt;span&gt;end&lt;/span&gt;. Depending on the return value of &lt;span&gt;condition&lt;/span&gt;, the function &lt;span&gt;then&lt;/span&gt; is  executed or not. Consequently, the printouts are either &quot;condition then  end&quot; or &quot;condition end&quot;, depending on the control flow.&lt;br /&gt;&lt;br /&gt;The corresponding control flows are depicted on the right: The upper three lines refer to the if-statement, and the lower three lines to the expression statement. They reveal that the expression statement  behaves similar to the if-statement. Note that the control flow edge  in the last line that skips the nodes &lt;span&gt;end&lt;/span&gt; and &lt;span&gt;end()&lt;/span&gt; is never traversed since the logical or expression always evaluates to true.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The interested reader would find more details about the N4JS flow graphs and their implementation in the &lt;a href=&quot;https://github.com/eclipse/n4js/blob/master/docs/org.eclipse.n4js.design/chapters/10_flowgraphs/flowgraphs.adoc&quot; target=&quot;_blank&quot;&gt;N4JS Design Document, Chapter: Flow Graphs.&lt;/a&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;&lt;br /&gt;</description>
	<pubDate>Thu, 04 Jul 2019 13:01:06 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>N4JS: Null/Undefined Analysis in N4JS</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-7569987920628430132.post-875574530099273704</guid>
	<link>https://n4js.blogspot.com/2018/09/nullundefined-analysis-in-n4js_20.html</link>
	<description>&lt;h4&gt;&lt;/h4&gt;&lt;h4&gt;&lt;b&gt;The N4JS IDE integrates validations and analyses that are quite common for IDEs of statically typed languages. However, these analyses are seldom available for dynamically typed languages like N4JS or TypeScript. In this post we present the null/undefined analysis for N4JS source code.&lt;/b&gt;&lt;/h4&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;&lt;span&gt;TypeError: Cannot read property of undefined&lt;/span&gt;&lt;/b&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;- Developer's staff of life&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;The runtime error above occurs pretty often for JavaScript programmers: A quick search on Google returned about 1.2 million for the term &lt;i&gt;TypeError: Cannot read property of undefined&lt;/i&gt;. When constraining search results to &lt;i&gt;&lt;span style=&quot;font-family: inherit;&quot;&gt;site:stackoverflow.com&lt;/span&gt;&lt;/i&gt; the query will still yield 126 thousand results. These numbers are comparable to the somewhat similar error &lt;i&gt;NullPointerException&lt;/i&gt; which has about 3 million hits on Google and about 525 thousand when constrained to stackoverflow.com. Some of these results are caused by rather simple mistakes that a null/undefined analysis could detect. As a result, the developer could restructure his code and remove these potential errors even before he runs his first test and hence save time.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Null/Undefined Analysis&lt;/h3&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;The N4JS IDE provides static analyses to indicate problems when it detects a property access on a variable which can be null or undefined. The analysis considers all assignments that occur either through a simple assignment expression or via destructuring. Loops, conditional expressions (e.g. &lt;span&gt;i = c? 1 : 0;&lt;/span&gt;) and declaration initializers are respected as well.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-2MLOhdP3dEk/W3_Cnrj20zI/AAAAAAAAAIU/VD7GMOKA5RkedjFYi2nhKfW2pHKtn2BLACEwYBhgL/s1600/N4JS-IDE.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://4.bp.blogspot.com/-2MLOhdP3dEk/W3_Cnrj20zI/AAAAAAAAAIU/VD7GMOKA5RkedjFYi2nhKfW2pHKtn2BLACEwYBhgL/s1600/N4JS-IDE.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;/div&gt;The screenshot above shows a first example where a potential TypeError is detected. Since there exists at least one control flow from &lt;span&gt;v.length&lt;/span&gt; backwards to all reachable definitions of &lt;span&gt;v&lt;/span&gt;,  such that one definition assigns null or undefined to &lt;span&gt;v&lt;/span&gt;, a warning is issued telling that &lt;span&gt;v&lt;/span&gt; may be undefined.&lt;br /&gt;&lt;br /&gt;To make sure that the analysis will produce fast results, it is implemented within some limitations. One is that the analysis is done separately for each body of a function, method, etc. (i.e. &lt;i&gt;intra-procedural&lt;/i&gt; analysis). Hence it lacks knowledge of variables that cross the borders of these bodies such as the return value of a nested function call. In addition, property variables (such as &lt;span&gt;v.length&lt;/span&gt;) are not analyzed since this would require the analysis to be context sensitive to the receiver object (here &lt;span&gt;v&lt;/span&gt;). However, these limitations are common for static analyses of statically typed languages and still allow to detect many problems regarding local variables and parameters.&lt;br /&gt;&lt;br /&gt;Usually, the analysis makes optimistic assumptions. For instance it can happen that a local variable receives the value of a method call or another non-local variable. In this situation the analysis assumes this value is neither null nor undefined. The same is true for function parameters. Only when there are distinct indications in the source code for a value of a local variable to be null or undefined, the analysis will issue a warning.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Guards&lt;/h3&gt;&lt;h3&gt; &lt;/h3&gt;Sometimes the programmer knows that a variable may be null or undefined and hence checks the variable explicitly, for instance using &lt;span&gt;if (v) {...}&lt;/span&gt;. As a result this check disables the warning in the then-branch that complies to the execution semantics.&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-Pjtv74Dim8U/W3_CntUSe0I/AAAAAAAAAIM/ECKOxqI2d2khOrBgcpxIva02wlkcAtnhACEwYBhgL/s1600/No_Warning.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://2.bp.blogspot.com/-Pjtv74Dim8U/W3_CntUSe0I/AAAAAAAAAIM/ECKOxqI2d2khOrBgcpxIva02wlkcAtnhACEwYBhgL/s1600/No_Warning.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;As shown in the screenshot above, neither at the expression &lt;span&gt;w.length &amp;lt; 1&lt;/span&gt; nor at the statement &lt;span&gt;return w.length&lt;/span&gt;; a warning is shown. Of course, the else-branch of such a check would consequently always indicate a warning when a property of variable &lt;span&gt;v&lt;/span&gt; is accessed. Checks for conditional expressions and binary logical expressions (e.g. &lt;span&gt;v &amp;amp;&amp;amp; v.length&lt;/span&gt;) are also supported. A reader might think: &quot;In case &lt;span&gt;w&lt;/span&gt; i&lt;span style=&quot;font-family: inherit;&quot;&gt;s null  the e&lt;/span&gt;xpression &lt;span&gt;w.length&lt;/span&gt; would fail.&quot; True, but in this example the analysis detects the value of &lt;span&gt;w&lt;/span&gt; being undefined. In ca&lt;span style=&quot;font-family: inherit;&quot;&gt;se null might&lt;/span&gt; have been assigned to &lt;span&gt;w&lt;/span&gt; e.g. in an if-condition before, the analysis will issue a warning of &lt;span&gt;w&lt;/span&gt; being null at the two &lt;span&gt;w.length&lt;/span&gt; expressions.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Data Flow&lt;/h3&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-y8LwrCo27Lw/W3_CnoC3pZI/AAAAAAAAAIQ/2B7jVp9SjqAqz-2TU1rg4gG3iDbdATlJgCEwYBhgL/s1600/Previous_Variable.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;https://1.bp.blogspot.com/-y8LwrCo27Lw/W3_CnoC3pZI/AAAAAAAAAIQ/2B7jVp9SjqAqz-2TU1rg4gG3iDbdATlJgCEwYBhgL/s1600/Previous_Variable.png&quot; width=&quot;570&quot; /&gt;&lt;/a&gt;&lt;/div&gt;There are situations where the value of a variable is null or undefined due to a previous assignment of a variable which may have been null or undefined before, like shown in the example above. Then, the null/undefined dereference problem occurs later when a property is accessed. Since the analysis respects data flow, it can follow the subsequent assignments. Hence a warning is shown at a property access indicating the null or undefined problem. Moreover, the warning also indicates the source of the null or undefined value which would be the variable &lt;span&gt;w&lt;/span&gt; in the example above.&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;The interested reader would find more details about the N4JS flow graphs and their implementation in the &lt;a href=&quot;https://github.com/eclipse/n4js/blob/master/docs/org.eclipse.n4js.design/chapters/10_flowgraphs/flowgraphs.adoc&quot; target=&quot;_blank&quot;&gt;N4JS Design Document, Chapter: Flow Graphs.&lt;/a&gt; &lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;div style=&quot;text-align: right;&quot;&gt;&lt;span style=&quot;font-size: x-small;&quot;&gt;by Marcus Mews&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 04 Jul 2019 13:00:20 +0000</pubDate>
	<author>noreply@blogger.com (n4js dev)</author>
</item>
<item>
	<title>PapyrusUML: The end of the Papyrus IC</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=2344</guid>
	<link>https://papyrusuml.wordpress.com/2019/07/02/the-end-of-the-papyrus-ic/</link>
	<description>&lt;p&gt;With the end of the Eclipse PolarSys adventure  comes that of the Papyrus IC.&lt;/p&gt;



&lt;p&gt;In the end, we could not maintain the momentum to move forward.&lt;/p&gt;



&lt;p&gt;We failed  to grow our community, and in doing so, we failed our community.&lt;/p&gt;



&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;But&lt;/strong&gt; &lt;strong&gt;this is not the end of Papyrus! Not by a long shot!&lt;/strong&gt;&lt;/p&gt;



&lt;p style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Papyrus is more vibrant than ever. &lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;New variants are still being build, e.g., Papyrus UMLLight, new released are still provided with continued improvements, and a new major release is in the plan for the project.&lt;/p&gt;



&lt;p&gt;As well, many companies, research groups, schools, and individuals are still teaching with it, working with it, improving it. &lt;/p&gt;



&lt;p&gt;A personal shout out to EclipseSource employees and Queens University’s faculty and students  for their dedication to the Papyrus products and to Francis, our glorious leader for his perseverance.!&lt;/p&gt;



&lt;p&gt;For the time being, this blog will remain a beacon of light for Papyrus . But here will be a time where it will have to close. Other endeavours await the author.&lt;/p&gt;



&lt;p&gt;If anyone one want to help or take it over, please let me know&lt;/p&gt;</description>
	<pubDate>Tue, 02 Jul 2019 15:47:10 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Current State of C/C++ Language Servers</title>
	<guid isPermaLink="false">https://medium.com/p/ab87e6fc186b</guid>
	<link>https://medium.com/@dougschaefer/current-state-of-c-c-language-servers-ab87e6fc186b?source=rss-8f7a70438965------2</link>
	<description>&lt;h3&gt;A Bit of History&lt;/h3&gt;&lt;p&gt;When I joined the Eclipse CDT project back in 2002 (yeah, it’s been a long time), I was working on modeling tools for “real time”, or more accurately, embedded reactive systems. Communicating state machines. I wrote code generators that generated C and C++ from &lt;a href=&quot;https://en.wikipedia.org/wiki/Real-Time_Object-Oriented_Modeling&quot;&gt;ROOM models&lt;/a&gt; and then eventually &lt;a href=&quot;https://www.omg.org/news/meetings/workshops/presentations/embedded-rt2002/04-1_Selic-Watson_RT-UML.tutorial&quot;&gt;UML-RT&lt;/a&gt;. ROOM was way better by the way and easier to generate for because it was more semantically complete and well defined. That objective is key later in this story.&lt;/p&gt;&lt;p&gt;We had the vision to integrate our modeling tools more closely with Integrated Development Environments. We started looking at Visual Studio but Eclipse was the young up and comer. That and IBM bought us, Rational by that point, and had already bought OTI who built Eclipse so it was a natural fit. And we were all in Ottawa. And by chance, Ottawa-based QNX had already written a C/C++ IDE based on Eclipse and were open sourcing it and it was perfect for our customers as well. It’s amazing how that all happened and led to my life as CDT Doug.&lt;/p&gt;&lt;p&gt;Our first order of business was to help the CDT become an industry class C/C++ IDE and become a foundation for integrating our modeling tools. Since we wanted to be able to generate model elements from code, it required we have accurate C and C++ parsers and indexers. No one figured we could do it, but we were able to put together a somewhat decent system written in Java in the org.eclipse.cdt.core plug-in.&lt;/p&gt;&lt;h3&gt;Scaling is Hard&lt;/h3&gt;&lt;p&gt;However, as the community started to try it out on real projects, especially ones of a significant size, we started to run into pretty massive performance problems with the indexer. We were essentially doing full builds of the user’s projects and storing the results in a string table. On large projects, builds take a long time. But users expect that and put up with it because they really need those binaries it produces. They don’t have the same patience for their IDEs building indexes the don’t really see and we paid a pretty high price for that.&lt;/p&gt;&lt;p&gt;As a solution, I wondered if we could store the symbol information that we were gathering in a way that we could load it up from disk as we were parsing other files and plug the symbol info into the AST the same way we do symbols normally. This would allow us to parse header files once and reuse the results, similar to how precompiled headers work. The price you pay is in accuracy since some systems parse header files multiple times with different macro settings. But my guess was that it wouldn’t be that bad.&lt;/p&gt;&lt;p&gt;It was hard to convince my team at IBM Rational to take this road. Accuracy was king for our modeling tools. But when I moved to join QNX, I decide to forgo that requirement and give this “fast indexer” strategy a go. And the rest is history. Performance on large projects was an order of magnitude faster. Incremental indexing of files as they were saved isn’t even noticeable. It was a huge success and my proudest contribution to the CDT. And I was even better when other community members handed us their expertise to make the accuracy better and better so you barely notice that at all either.&lt;/p&gt;&lt;h3&gt;C++ Rises from the “Dead”&lt;/h3&gt;&lt;p&gt;Move the clock a decade later and we started running into a problem. The C++ standards community has new life and are adding a tonne of new features at a three year cadence. The CDT community has long lost most of the experts that build the original parsers. Lucky for us a new crop of contributors has come along and are doing heroes work to keep up. But it’s getting harder and harder. One thing we benefit from is how slow embedded developers, the majority of users of CDT, are to adopt the new standards. It gives us time, but not forever. We need to find a better way.&lt;/p&gt;&lt;p&gt;Then along came the Language Server Protocol and a small handful of language servers that do C/C++. I’ve investigated four of them. Three of them are based on llvm and clang. One of them is in tree with llvm and clang in clang-tools-extra, i.e., clangd. The other two are projects that use libclang with parts of the tree, i.e., cquery and ccls. Those two projects are what I call “one person projects” and with cquery at least, that person found something else to do last November. Beware of the one person project.&lt;/p&gt;&lt;h3&gt;clangd&lt;/h3&gt;&lt;p&gt;I’ve spent a lot of time with clangd when experimenting with Visual Studio Code. For what it does, clangd is very accurate and really fast. It uses compile_commands.json files to find out what source files are built and what compiler and command lines they use. I’ve had to fork the tree to add in support for discovering compilers it doesn’t know about, but that was pretty easy to put together. It gives great content assist and you get the benefit of clang’s awesome compilation error diagnostics as you type. It shows a lot of promise.&lt;/p&gt;&lt;p&gt;However clangd for the longest time lacked an indexer. When you search for references it only finds them in files you have opened previously. The thought as I understand it is that you use another process to build the index and that is usually done at build time. However, not all users have such an environment set up so having an index created by the IDE is a mandatory feature. Now, clangd did eventually get an indexer but it does what the old CDT indexer did and completely parses the source three. That predictably takes forever on large projects and I don’t think users have the appetite to take a huge step backwards like that.&lt;/p&gt;&lt;h3&gt;IntelliSense&lt;/h3&gt;&lt;p&gt;While waiting for the right solution to arrive for clangd, I thought I’d give the Microsoft C/C++ Tools for VS Code a try. My initial experience was quite surprising. It actually worked well with a gnu tools cross compiler project I used for testing. You have to teach it how to parse your code using a magic JSON file, which fits right in with the rest of VS Code. It’s able to pick out the default include path when you point it at your compiler. It has a MI support for debugging, though no built-in support for remote debugging but that was hackable. It seemed like a reasonable alternative, at least for VS Code.&lt;/p&gt;&lt;p&gt;However when I tried it with one of our production projects it quickly fell apart. It does a great job trying to figure out include paths, similar to the heuristics we use in CDT. That includes things like treating all the folders in your workspace as a potential include path entry. But it tended to make mistakes. It even has support for compile_commands.json files so I could tell it the command lines that were use. It did better but still tried to do too much and gave incorrect results.&lt;/p&gt;&lt;p&gt;That and it doesn’t have an index yet either. One is coming soon, but if it can’t figure out how to parse my files correctly, it’s not going to be a great experience. Still a lot of work to do there.&lt;/p&gt;&lt;h3&gt;Where do we go from here?&lt;/h3&gt;&lt;p&gt;As it stands today, at least from a CDT perspective, there really isn’t a language server solution that comes near what we have in CDT. Yes, some things are better. Both these language servers are using real parsers to parse the code. (or at least clangd is. Microsoft’s, of course, is closed source so I can only assume). They give really good content assist and error diagnostics and open declaration works. But without a usable indexer, you don’t get accurate symbol references. And I haven’t even mentioned refactoring which CDT has and which is not even suggested in the language server protocol.&lt;/p&gt;&lt;p&gt;So if all your doing is typing in code, the new language servers are great. But if you need to do some code mining to understand the code before you change it, you’re out of luck. The good news is that we are continuing to see investment in them so who knows. But then, maybe the CDT parsers catch up with the language standards before these other language servers grow great indexers making the whole thing moot. I wouldn’t bet against that right now.&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=ab87e6fc186b&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 28 Jun 2019 19:30:59 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: The Eclipse IoT Newsletter is out!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/utk3Q0Gvd-c/eclipse-iot-newsletter-june-2019</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/utk3Q0Gvd-c/eclipse-iot-newsletter-june-2019</link>
	<description>Welcome to the second issue of the Eclipse IoT Newsletter for 2019, a newsletter tailored to share Eclipse IoT community and industry news.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/utk3Q0Gvd-c&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Jun 2019 16:25:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter: First Look at Eclipse IDE 2019-06</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/fTPJ-a4P9bA/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/fTPJ-a4P9bA/</link>
	<description>This month the Eclipse Newsletter features the Eclipse IDE 2019-06, which is now available for download!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/fTPJ-a4P9bA&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 27 Jun 2019 14:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to 2019-06</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=41826</guid>
	<link>https://eclipsesource.com/blogs/2019/06/27/eclipsesource-oomph-profile-updated-to-2019-06/</link>
	<description>&lt;p&gt;Last week, Eclipse 2019-06 has been released, a new version of the Eclipse IDE and platform. The first notable improvement is...&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2019/06/27/eclipsesource-oomph-profile-updated-to-2019-06/&quot; rel=&quot;nofollow&quot;&gt;EclipseSource Oomph Profile – updated to 2019-06&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Thu, 27 Jun 2019 08:17:34 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Mysterious Eclipse Collections APIs: forEachInBoth</title>
	<guid isPermaLink="false">https://medium.com/p/2102912f1eee</guid>
	<link>https://medium.com/@donraab/mysterious-eclipse-collections-apis-foreachinboth-2102912f1eee?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Sometimes APIs go undiscovered for a long time&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*8aeGt_jtxUp_7BA6YC4MJQ.jpeg&quot; /&gt;What is Stonehenge?&lt;/figure&gt;&lt;h3&gt;Have you ever heard of forEachInBoth?&lt;/h3&gt;&lt;p&gt;There is a method named forEachInBoth available in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;, but it can only be found on four utility classes. You can find the method on ArrayIterate, ListIterate, RandomAccessListIterate and ArrayListIterate.&lt;/p&gt;&lt;p&gt;The method forEachInBoth, takes two Lists or Arrays of the same size and iterates over both of them passing the elements from both lists at particular indexes into a two argument procedure.&lt;/p&gt;&lt;p&gt;The method has not been promoted to the ListIterable API in Eclipse Collections. This is probably because you can now zip two lists together and just use forEach or any of the other rich APIs from MutableList instead.&lt;/p&gt;&lt;h3&gt;The Method Signatures&lt;/h3&gt;&lt;p&gt;The method signatures for forEachInBoth on ListIterate, RandomAccessListIterate and ArrayListIterate are very similar so I will only show the signatures for ListIterate and ArrayIterate.&lt;/p&gt;&lt;h4&gt;ListIterate&lt;/h4&gt;&lt;pre&gt;public static &amp;lt;T1, T2&amp;gt; void forEachInBoth(&lt;br /&gt;        List&amp;lt;T1&amp;gt; list1, &lt;br /&gt;        List&amp;lt;T2&amp;gt; list2, &lt;br /&gt;        Procedure2&amp;lt;? super T1, ? super T2&amp;gt; procedure)&lt;/pre&gt;&lt;h4&gt;ArrayIterate&lt;/h4&gt;&lt;pre&gt;public static &amp;lt;T1, T2&amp;gt; void forEachInBoth(&lt;br /&gt;        T1[] objectArray1,&lt;br /&gt;        T2[] objectArray2,&lt;br /&gt;        Procedure2&amp;lt;? super T1, ? super T2&amp;gt; procedure)&lt;/pre&gt;&lt;h3&gt;When is forEachInBoth useful?&lt;/h3&gt;&lt;p&gt;One example that I discovered that forEachInBoth works well with is for converting two separate lists or arrays into a Map. Using forEachInBoth, I am able to use a method reference for calling put on the map instance. This was unexpectedly cool.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*o6s59wsMU-S8JcCoRB4kkw.png&quot; /&gt;Putting two lists into a Map&lt;/figure&gt;&lt;h4&gt;The Source&lt;/h4&gt;&lt;pre&gt;@Test&lt;br /&gt;public void forEachInBothList()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; one = &lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3);&lt;br /&gt;    List&amp;lt;String&amp;gt; two = &lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;);&lt;br /&gt;    Map&amp;lt;Integer, String&amp;gt; map = Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty();&lt;br /&gt;&lt;br /&gt;    ListIterate.&lt;em&gt;forEachInBoth&lt;/em&gt;(one, two, map::put);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, 3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;), &lt;br /&gt;            map);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;This could easily work with two arrays of the same size using ArrayIterate instead.&lt;/p&gt;&lt;h3&gt;What about zip?&lt;/h3&gt;&lt;p&gt;If you use zip instead, you can use the fluent API to convert the zipped Lists into a Map using toMap. However, I could not take an existing Map and iterate using forEach or each and call Map.put since I would be iterating over Pair instances that would need to have the the two component parts of the pairs extracted and passed in as the key and value parameters.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*882skpvmBLh556IHkK5mOQ.png&quot; /&gt;Zipping two lists and putting them into a Map using toMap&lt;/figure&gt;&lt;h4&gt;The Source&lt;/h4&gt;&lt;pre&gt;@Test&lt;br /&gt;public void zipList()&lt;br /&gt;{&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; one =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3);&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; two =&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;);&lt;br /&gt;&lt;br /&gt;    MutableMap&amp;lt;Integer, String&amp;gt; map =&lt;br /&gt;            one.zip(two).toMap(Pair::getOne, Pair::getTwo);&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, 3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;),&lt;br /&gt;            map);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;In the case of zip with this example, there is a temporary List created after zip is called, but it will be garbage collected after the call to toMap since the List is not referenced anywhere. This same code can be implemented lazily by calling asLazy before calling zip. This removes the temporary List creation.&lt;/p&gt;&lt;pre&gt;MutableMap&amp;lt;Integer, String&amp;gt; map =&lt;br /&gt;        one.asLazy()&lt;br /&gt;                .zip(two)&lt;br /&gt;                .toMap(Pair::getOne, Pair::getTwo);&lt;/pre&gt;&lt;h3&gt;When to use forEachInBoth or zip?&lt;/h3&gt;&lt;p&gt;The primary benefit of forEachInBoth is that it is located in static utility and will work directly with Java arrays and any java.util.List. So if you need to convert two JDK Lists quickly into a Map, it might just be what the doctor ordered. However, because the method forEachInBoth returns void, you will not be able to make fluent methods calls like you can using zip. Most of the time, you may find zip more useful when dealing with two lists especially if you are performing multiple operations on the result.&lt;/p&gt;&lt;p&gt;If you discover a novel use case where forEachInBoth works well, please let us know by creating an &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/issues&quot;&gt;issue on GitHub&lt;/a&gt;. We could move forEachInBoth up directly to the ListIterable API if there prove to be more good use cases that we just haven’t seen yet.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=2102912f1eee&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 26 Jun 2019 13:31:58 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms and EMF Client Platform 1.21.0 released!</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=41810</guid>
	<link>https://eclipsesource.com/blogs/2019/06/25/emf-forms-and-emf-client-platform-1-21-0-released/</link>
	<description>&lt;p&gt;We are happy to announce that with the Eclipse Release 2019-06, we have also shipped  EMF Forms and EMF Client Platform...&lt;/p&gt;&lt;p&gt;The post &lt;a href=&quot;https://eclipsesource.com/blogs/2019/06/25/emf-forms-and-emf-client-platform-1-21-0-released/&quot; rel=&quot;nofollow&quot;&gt;EMF Forms and EMF Client Platform 1.21.0 released!&lt;/a&gt; appeared first on &lt;a href=&quot;https://eclipsesource.com&quot; rel=&quot;nofollow&quot;&gt;EclipseSource&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 25 Jun 2019 20:40:05 +0000</pubDate>
</item>
<item>
	<title>itemis: Graphical Editing Framework (GEF) 5.1.0 Release</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/graphical-editing-framework-gef-5.1.0-release</guid>
	<link>https://blogs.itemis.com/en/graphical-editing-framework-gef-5.1.0-release</link>
	<description>&lt;p&gt;The Eclipse GEF team is happy to announce that version 5.1.0 of the &lt;a href=&quot;https://www.eclipse.org/gef/&quot; title=&quot; Eclipse&quot;&gt;Eclipse Graphical Editing Framework&lt;/a&gt; is part of the Eclipse 2019-06 simultaneous release:&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;img alt=&quot;GEF_Installation&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Eclipse/GRAPHICAL%20EDITING%20FRAMEWORK%20(GEF)%205.1.0%20RELEASE/GEF_Installation.jpg?width=869&amp;amp;name=GEF_Installation.jpg&quot; style=&quot;width: 869px;&quot; width=&quot;869&quot; /&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;The project team has worked hard since the &lt;strong&gt;&lt;a href=&quot;https://blogs.itemis.com/en/graphical-editing-framework-gef-5.0.0-release&quot; title=&quot; Graphical Editing Framework (GEF) 5.0.0 Release&quot;&gt; Eclipse GEF 5.0.0 release &lt;/a&gt;&lt;/strong&gt; two years ago. The new release fixes &lt;a href=&quot;https://projects.eclipse.org/projects/tools.gef/releases/5.1.0-2019-06/bugs&quot;&gt;&lt;strong&gt;issues&lt;/strong&gt;&lt;/a&gt; on the &lt;em&gt;GEF MVC&lt;/em&gt;, &lt;em&gt;GEF Zest&lt;/em&gt;, and &lt;em&gt;GEF DOT&lt;/em&gt; components.&lt;/p&gt; 
&lt;p&gt;We would like to thank all contributors who made this release possible:&lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;GEF_Contributions&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/Blog%20(2019)/Embedded/GRAPHICAL%20EDITING%20FRAMEWORK%20(GEF)%205.1.0%20RELEASE/GEF_Contributions.png?width=874&amp;amp;name=GEF_Contributions.png&quot; style=&quot;width: 874px;&quot; width=&quot;874&quot; /&gt;&lt;/p&gt; 
&lt;p&gt; &lt;/p&gt; 
&lt;p&gt;Your feedback regarding the new release is highly appreciated. If you have any questions or suggestions, please let us know via the &lt;a href=&quot;https://www.eclipse.org/forums/index.php?t=thread&amp;amp;frm_id=81&quot; title=&quot;Eclipse GEF forum&quot;&gt;&lt;strong&gt;Eclipse GEF forum&lt;/strong&gt;&lt;/a&gt; or create an issue on &lt;a href=&quot;https://bugs.eclipse.org/bugs/describecomponents.cgi?product=GEF&quot; title=&quot;Eclipse Bugzilla&quot;&gt;&lt;strong&gt;Eclipse Bugzilla&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; 
&lt;p&gt;For further information, we recommend to take a look at the &lt;strong&gt;&lt;a href=&quot;https://blogs.itemis.com/topic/gef&quot; title=&quot;More Eclipse GEF blog articles&quot;&gt;Eclipse GEF blog articles&lt;/a&gt;&lt;/strong&gt;, watch the &lt;a href=&quot;https://www.youtube.com/watch?v=GnSVLNYfGlk&quot; title=&quot;Eclipse GEF DOT Video&quot;&gt;&lt;strong&gt;Eclipse GEF session on the EclipseCon Europe 2018&lt;/strong&gt;&lt;/a&gt;, and try out the&lt;strong&gt; &lt;a href=&quot;https://info.itemis.com/en/gef/tutorials/&quot; title=&quot;Online tutorial: Getting started with GEF 5.0&quot;&gt;Getting started with Eclipse GEF online tutorial&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; 
&lt;p&gt;&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgraphical-editing-framework-gef-5.1.0-release&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 25 Jun 2019 08:00:00 +0000</pubDate>
	<author>miklossy@itemis.de (Tamas Miklossy)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse ioFog: Evolving Toward Native Kubernetes Orchestration at the Edge</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/LxHgMGOZVEM/eclipse-iofog-evolving-toward-native-kubernetes-orchestration-edge</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/LxHgMGOZVEM/eclipse-iofog-evolving-toward-native-kubernetes-orchestration-edge</link>
	<description>The Eclipse Foundation is excited to support today's announcement of the initial availability of Eclipse ioFog features that make any Kubernetes distribution edge-aware.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/LxHgMGOZVEM&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 24 Jun 2019 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Jens Reimann: Bringing IoT to Red Hat AMQ Online</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=4160</guid>
	<link>https://dentrassi.de/2019/06/24/bringing-iot-to-red-hat-amq-online/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/index&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Red Hat AMQ Online 1.1&lt;/a&gt; was recently announced, and I am excited about it because it contains a tech preview of our Internet of Things &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/amq_online_1.1_on_openshift_container_platform_release_notes/tech-preview-online#internet_of_things_iot_functionality&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;(IoT) support&lt;/a&gt;. AMQ Online is the “messaging as service solution” from Red Hat AMQ. Leveraging the work we did on &lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; allows us to integrate a &lt;a href=&quot;https://dentrassi.de/2018/07/25/scaling-iot-eclipse-hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;scalable&lt;/a&gt;,  cloud-native IoT personality into this general-purpose messaging layer.  And the whole reason why you need an IoT messaging layer is so you can  focus on connecting your cloud-side application with the millions of  devices that you have out there.&lt;/p&gt;



&lt;span id=&quot;more-4160&quot;&gt;&lt;/span&gt;



&lt;p class=&quot;has-background has-very-light-gray-background-color&quot;&gt;&lt;em&gt;This post was originally published on &lt;a href=&quot;https://developers.redhat.com/blog/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Red Hat Developers&lt;/a&gt;, the community to learn, code, and share faster. To read the original post, click &lt;a href=&quot;https://developers.redhat.com/blog/2019/05/14/bringing-iot-to-red-hat-amq-online/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;



&lt;h2&gt;What is Eclipse Hono&lt;img alt=&quot;™&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/12.0.0-1/72x72/2122.png&quot; style=&quot;height: 1em;&quot; /&gt;?&lt;/h2&gt;



&lt;p&gt;Eclipse Hono is an IoT abstraction layer. It defines APIs in order to build an IoT stack in the cloud, taking care of things like device credentials, protocols, and scalability. For some of those APIs, it comes with a ready-to-run implementation, such as the MQTT protocol adapter. For others, such as the device registry, it only defines the necessary API. The actual implementation must be provided to the system.&lt;/p&gt;



&lt;div class=&quot;wp-block-image&quot;&gt;&lt;figure class=&quot;aligncenter is-resized&quot;&gt;&lt;img alt=&quot;Eclipse Hono IoT architecture overview&quot; class=&quot;wp-image-4165&quot; height=&quot;346&quot; src=&quot;https://dentrassi.de/wp-content/uploads/hono-overview.svg&quot; width=&quot;849&quot; /&gt;Eclipse Hono overview&lt;/figure&gt;&lt;/div&gt;



&lt;p&gt;A key feature of Hono is that it normalizes the different IoT-specific protocols on &lt;a href=&quot;http://www.amqp.org/specification/1.0/amqp-org-download&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;AMQP 1.0&lt;/a&gt;.  This protocol is common on the data center side, and it is quite  capable of handling the requirements on throughput and back-pressure.  However, on the IoT devices side, other protocols might have more  benefits for certain use cases. MQTT is a favorite for many people, as  is plain HTTP due to its simplicity. LoRaWAN, CoAP, Sigfox, etc. all  have their pros and cons. If you want to play in the world of IoT, you  simply have to support them all. Even when it comes to custom protocols,  Hono provides a software stack to easily implement your custom  protocol.&lt;/p&gt;



&lt;h2&gt;AMQ Online&lt;/h2&gt;



&lt;p&gt;Hono requires an AMQP 1.0 messaging backend. It requires a broker and a  component called “router” (which doesn’t own messages but only forwards  them to the correct receiver). Of course, it expects the AMQP layer to  be as scalable as Hono itself. AMQ Online is a “self-service,” messaging  solution for the cloud. So it makes sense to allow Hono to run on top  of it. We had this deployment model for a while in Hono, allowing the  use of &lt;a href=&quot;https://enmasse.io/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; (the upstream project of AMQ Online).&lt;/p&gt;



&lt;h2&gt;Self-service IoT&lt;/h2&gt;



&lt;p&gt;In a world of Kubernetes and operators, the thing that you are actually looking for is more like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;kind: IoTProject
 apiVersion: iot.enmasse.io/v1alpha1
 metadata:
   name: iot
   namespace: myapp
 spec:
   downstreamStrategy:
     managedStrategy:
       addressSpace:
         name: iot
         plan: standard-unlimited
       addresses:
         telemetry:
           plan: standard-small-anycast
         event:
           plan: standard-small-queue
         command:
           plan: standard-small-anycast&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You simply define your IoT project, by creating a new custom resource using &lt;code&gt;kubectl create -f&lt;/code&gt;  and you are done. If you have the IoT operator of AMQ Online 1.1  deployed, then it will create the necessary address space for you, and  set up the required addresses.&lt;/p&gt;



&lt;p&gt;The IoT project will also automatically act as a Hono tenant. In this example, the Hono tenant would be &lt;code&gt;myapp.iot&lt;/code&gt;, and so the full authentication ID of e.g. &lt;code&gt;sensor1&lt;/code&gt; would be &lt;code&gt;sensor1@myapp.iot&lt;/code&gt;. The IoT project also holds all the optional tenant configuration under the section &lt;code&gt;.spec.configuration&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;With the &lt;a href=&quot;https://github.com/ctron/hat&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Hono admin tool,&lt;/a&gt;  you can quickly register a new device with your installation (the  documentation will also tell you how to achieve the same with &lt;code&gt;curl&lt;/code&gt;):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;# register the new context once with 'hat'
hat context create myapp1 --default-tenant myapp.iot https://$(oc -n messaging-infra get routes device-registry --template='{{ .spec.host }}')

# register a new device and set credentials
hat reg create 4711
hat cred set-password sensor1 sha-512 hono-secret --device 4711&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;With that, you can simply use Hono as always. First, start the consumer:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;# from the hono/cli directory
export MESSAGING_HOST=$(oc -n myapp get addressspace iot -o jsonpath={.status.endpointStatuses[?(@.name==\'messaging\')].externalHost})
export MESSAGING_PORT=443

mvn spring-boot:run -Drun.arguments=--hono.client.host=$MESSAGING_HOST,--hono.client.port=$MESSAGING_PORT,--hono.client.username=consumer,--hono.client.password=foobar,--tenant.id=myapp.iot,--hono.client.trustStorePath=target/config/hono-demo-certs-jar/tls.crt,--message.type=telemetry&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;And then publish some data to the telemetry channel:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;curl -X POST -i -u sensor1@myapp.iot:hono-secret -H 'Content-Type: application/json' --data-binary '{&quot;temp&quot;: 5}' https://$(oc -n enmasse-infra get routes iot-http-adapter --template='{{ .spec.host }}')/telemetry&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;For more detailed instructions, see: &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_amq/7.2/html/evaluating_amq_online_on_openshift_container_platform/assembly-iot-messaging&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Getting Started with Internet of Things (IoT) on AMQ Online&lt;/a&gt;.&lt;/p&gt;



&lt;h2&gt;IoT integration&lt;/h2&gt;



&lt;p&gt;As mentioned before, you don’t do IoT just for the fun of it (well,  maybe at home, with a Raspberry Pi, Node.js, OpenHAB, and mosquitto).  But when you want to connect millions of devices with your cloud  backend, you want to start working with that data. Using Hono gives you a  pretty simple start. Everything you need is an AMQP 1.0 connectivity.  Assuming you use Apache Camel, pushing telemetry data towards a Kafka  cluster is as easy as (also see &lt;a href=&quot;https://github.com/ctron/hono-example-bridge&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;ctron/hono-example-bridge&lt;/a&gt;):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&amp;lt;route id=&quot;store&quot;&amp;gt;
  &amp;lt;from uri=&quot;amqp:telemetry/myapp.iot&quot; /&amp;gt;

  &amp;lt;setHeader id=&quot;setKafkaKey&quot; headerName=&quot;kafka.KEY&quot;&amp;gt;
    &amp;lt;simple&amp;gt;${header[device_id]}&amp;lt;/simple&amp;gt;
  &amp;lt;/setHeader&amp;gt;

  &amp;lt;to uri=&quot;kafka:telemetry?brokers={{kafka.brokers}}&quot; /&amp;gt;
&amp;lt;/route&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Bringing together solutions like &lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/fuse&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Red Hat Fuse&lt;/a&gt;, &lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/amq&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;AMQ&lt;/a&gt; and &lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/decision-manager&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Decision Manager&lt;/a&gt; makes it a lot easier to give your custom logic in the data center (your value add‑on) access to the Internet of Things.&lt;/p&gt;



&lt;h2&gt;What’s next?&lt;/h2&gt;



&lt;p&gt;AMQ Online 1.1 is the first version to feature IoT as a tech preview. So, give it a try, play with it, but also keep in mind that it is a tech preview.&lt;/p&gt;



&lt;p&gt;In the upstream project EnMasse, we are currently working on creating a scalable, general purpose device registry based on &lt;a href=&quot;https://infinispan.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Infinispan&lt;/a&gt;.  Hono itself doesn’t bring a device registry, it only defines the APIs  it requires. However, we think it makes sense to provide a scalable  device registry, out of the box, to get you started. In AMQ Online, that  would then be supported by using &lt;a href=&quot;https://www.redhat.com/en/technologies/jboss-middleware/data-grid&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Red Hat Data Grid&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;In the next months, we hope to also see the release of Eclipse Hono 1.0 and graduate the project from the incubation phase. This is a big step for a project at Eclipse but also the right thing to do. Eclipse Hono is ready, and graduating the project means that we will pay even closer attention to APIs and stability. Still, new features like LoRaWAN, maybe Sigfox, and a proper HTTP API definition for the device registry, are already under development.&lt;/p&gt;



&lt;p&gt;So, there are lots of new features and enhancements that we hope to bring into AMQ Online 1.2.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2019/06/24/bringing-iot-to-red-hat-amq-online/&quot; rel=&quot;nofollow&quot;&gt;Bringing IoT to Red Hat AMQ Online&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Mon, 24 Jun 2019 07:47:59 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Eclipse ioFog: Evolving Toward Native Kubernetes Orchestration at the Edge</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1500</guid>
	<link>https://eclipse-foundation.blog/2019/06/23/eclipse-iofog-delivering-k8s-at-the-edge/</link>
	<description>&lt;p&gt;With the proliferation of AI, autonomous vehicles, 5G, IoT, and other industrial use cases that require lightning-fast data processing, edge computing has emerged over the past few years as a way to address the limitations of existing cloud architectures to process information and deliver services at the “IoT edge”. Instead of backhauling data to the centralized cloud, edge computing brings computational power closer to data sources to support near real-time insights and local actions while reducing network bandwidth and storage requirements.&lt;/p&gt;
&lt;p&gt;According to &lt;a href=&quot;https://www.gartner.com/smarterwithgartner/what-edge-computing-means-for-infrastructure-and-operations-leaders/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Gartner&lt;/a&gt;, 75% of enterprise-generated data will be created and processed outside a traditional centralized data center or cloud by 2025. While the problems at the IoT edge — connectivity, manageability, scalability, reliability, security — are being solved as point solutions by enterprises and ecosystem players, there is a need for a foundational industry-wide standard for managing distributed IoT workloads. Time and again, open source has been proven to be the best way to deliver complex platform software with industrial scale collaboration.&lt;/p&gt;
&lt;p&gt;Enter Kubernetes, the de facto standard for orchestrating containers and the applications running inside them. Kubernetes has massive potential for handling IoT workloads on the edge by providing a common control plane across hybrid cloud and edge environments to simplify management and operations. Within the &lt;a href=&quot;https://github.com/kubernetes/community/tree/master/wg-iot-edge&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kubernetes IoT Edge Working Group&lt;/a&gt;, members of the Kubernetes and Eclipse communities are collaborating with leading technology innovators to extend Kubernetes to support dynamically, securely, and remotely managing edge nodes.&lt;/p&gt;
&lt;p&gt;A great example of this collaboration is Eclipse ioFog, a universal Edge Compute Platform which offers a standardized way to develop and remotely deploy secure microservices to edge computing devices. ioFog can be installed on any hardware running Linux and provides a universal runtime for microservices to dynamically run on the edge. Companies in different vertical markets such as retail, automotive, oil and gas, telco, and healthcare are using ioFog to turn any compute device into an edge software platform.&lt;/p&gt;
&lt;p&gt;The Eclipse Foundation is excited to support today’s announcement of the initial availability of ioFog features that make any Kubernetes distribution edge-aware. With this latest release, developers are able to extend Kubernetes to easily deploy, secure, and manage edge computing networks supporting applications such as advanced AI and machine learning algorithms.&lt;/p&gt;
&lt;p&gt;Farah Papaioannou, co-founder and president of Edgeworx, explains the significance of the release this way:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;“ioFog is a proven platform at the edge. With this release, we build on native Kubernetes, seamlessly extending it to the edge…We do this based on things that actually matter at the edge, such as latency, location or resources. We are delivering today a full cloud-to-edge solution, that’s 100-percent open source and works with any Kubernetes flavors and distros.”&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;These native Kubernetes enhancements are in the process of being contributed to the Eclipse ioFog open source project. We are proud to support the collective efforts of the Eclipse community and the Kubernetes ecosystem to help developers deploy, manage, and orchestrate applications and microservices from cloud to edge in a simple and secure manner.&lt;/p&gt;
&lt;p&gt;For more information about ioFog, get started by using &lt;a href=&quot;https://iofog.org/releases.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;this link&lt;/a&gt; to install and set up your production ioFog environment. If you have questions or want to connect with other people involved in this platform, join the &lt;a href=&quot;https://discuss.iofog.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ioFog community&lt;/a&gt; and the &lt;a href=&quot;https://accounts.eclipse.org/mailing-list/iofog-dev&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;mailing list&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Sun, 23 Jun 2019 20:46:52 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Become a Sponsor at EclipseCon Europe 2019!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/T421K3DDX_8/become-sponsor-eclipsecon-europe-2019</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/T421K3DDX_8/become-sponsor-eclipsecon-europe-2019</link>
	<description>We're gearing up for EclipseCon Europe 2019, our biggest event of the year which brings together developers, architects, and open source business leaders.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/T421K3DDX_8&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jun 2019 16:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Update for Jakarta EE community: June 2019</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/Jxl4CGEvroA/update-jakarta-ee-community-june-2019</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/Jxl4CGEvroA/update-jakarta-ee-community-june-2019</link>
	<description>Get the latest monthly email update on the Jakarta EE community from news highlights to various meetings and events related to the platform!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/Jxl4CGEvroA&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 20 Jun 2019 17:05:00 +0000</pubDate>
</item>

</channel>
</rss>
